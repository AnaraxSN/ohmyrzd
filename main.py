#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Å—Ç –Ω–∞ –ø–æ–µ–∑–¥–∞—Ö –†–ñ–î
"""

import asyncio
import logging
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes
)

from rzd_parser import RZDParser
from database import Database
from monitoring import MonitoringService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class RZDBot:
    def __init__(self, token: str):
        self.application = Application.builder().token(token).build()
        self.db = Database()
        self.parser = RZDParser()
        self.monitoring = MonitoringService(self.db, self.parser, token)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("my_subscriptions", self.my_subscriptions_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = (
            f"üöÇ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ –ø–æ–µ–∑–¥–∞—Ö –†–ñ–î.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user.id] = {
            'state': 'waiting_departure',
            'data': {}
        }
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üöÇ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –†–ñ–î\n\n"
            "üìù –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
            "1. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "2. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –ø—Ä–∏–±—ã—Ç–∏—è\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏\n"
            "4. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥ –∏ —Ç–∏–ø –º–µ—Å—Ç–∞\n"
            "5. –ë–æ—Ç –Ω–∞—á–Ω–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–≤–µ–¥–æ–º–∏—Ç –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö\n\n"
            "üîç –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/my_subscriptions - –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup)
    
    async def my_subscriptions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_subscriptions"""
        user_id = update.effective_user.id
        subscriptions = await self.db.get_user_subscriptions(user_id)
        
        if not subscriptions:
            text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        else:
            text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
            keyboard = []
            
            for sub in subscriptions:
                text += (
                    f"üöÇ {sub['train_number']} ({sub['departure_station']} ‚Üí {sub['arrival_station']})\n"
                    f"üìÖ {sub['departure_date']}\n"
                    f"üõèÔ∏è {sub['seat_type']} ({sub['berth_position']})\n"
                    f"‚è∞ –°–æ–∑–¥–∞–Ω–∞: {sub['created_at']}\n\n"
                )
                keyboard.append([InlineKeyboardButton(
                    f"‚ùå –£–¥–∞–ª–∏—Ç—å {sub['train_number']}", 
                    callback_data=f"delete_sub_{sub['id']}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            stats = await self.monitoring.get_monitoring_stats()
            
            text = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
                f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats.get('active_subscriptions', 0)}\n"
                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ 24—á: {stats.get('notifications_24h', 0)}\n"
                f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ –î–∞' if stats.get('is_running', False) else '‚ùå –ù–µ—Ç'}\n"
                f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {stats.get('check_interval', 0)} —Å–µ–∫"
            )
            
            await update.message.reply_text(text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        if data == "back_to_start":
            await self.start_command(update, context)
        elif data == "help":
            await self.help_command(update, context)
        elif data == "my_subscriptions":
            await self.my_subscriptions_command(update, context)
        elif data.startswith("delete_sub_"):
            sub_id = int(data.split("_")[2])
            await self.db.delete_subscription(sub_id)
            await query.edit_message_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        elif data.startswith("select_train_"):
            await self._handle_train_selection(query, data)
        elif data.startswith("select_seat_"):
            await self._handle_seat_selection(query, data)
        elif data.startswith("select_berth_"):
            await self._handle_berth_selection(query, data)
    
    async def _handle_train_selection(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∞"""
        train_data = data.replace("select_train_", "")
        train_info = train_data.split("|")
        
        user_id = query.from_user.id
        user_state = self.user_states.get(user_id, {})
        user_state['data']['selected_train'] = {
            'number': train_info[0],
            'departure_time': train_info[1],
            'arrival_time': train_info[2],
            'duration': train_info[3]
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –º–µ—Å—Ç
        keyboard = [
            [InlineKeyboardButton("üõèÔ∏è –ü–ª–∞—Ü–∫–∞—Ä—Ç", callback_data="select_seat_–ø–ª–∞—Ü–∫–∞—Ä—Ç")],
            [InlineKeyboardButton("üö™ –ö—É–ø–µ", callback_data="select_seat_–∫—É–ø–µ")],
            [InlineKeyboardButton("üè† –°–í", callback_data="select_seat_—Å–≤")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üöÇ –í—ã–±—Ä–∞–Ω –ø–æ–µ–∑–¥ {train_info[0]}\n"
            f"‚è∞ {train_info[1]} ‚Üí {train_info[2]} ({train_info[3]})\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞:",
            reply_markup=reply_markup
        )
    
    async def _handle_seat_selection(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞"""
        seat_type = data.replace("select_seat_", "")
        user_id = query.from_user.id
        user_state = self.user_states.get(user_id, {})
        user_state['data']['seat_type'] = seat_type
        
        if seat_type == "–∫—É–ø–µ":
            # –î–ª—è –∫—É–ø–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª–∫–∏
            keyboard = [
                [InlineKeyboardButton("‚¨ÜÔ∏è –í–µ—Ä—Ö–Ω—è—è –ø–æ–ª–∫–∞", callback_data="select_berth_–≤–µ—Ä—Ö–Ω—è—è")],
                [InlineKeyboardButton("‚¨áÔ∏è –ù–∏–∂–Ω—è—è –ø–æ–ª–∫–∞", callback_data="select_berth_–Ω–∏–∂–Ω—è—è")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üõèÔ∏è –í—ã–±—Ä–∞–Ω —Ç–∏–ø –º–µ—Å—Ç–∞: {seat_type}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–∫—É:",
                reply_markup=reply_markup
            )
        else:
            # –î–ª—è –ø–ª–∞—Ü–∫–∞—Ä—Ç–∞ –∏ –°–í —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await self._create_subscription(query, seat_type, "–ª—é–±–∞—è")
    
    async def _handle_berth_selection(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∫–∏"""
        berth_position = data.replace("select_berth_", "")
        user_id = query.from_user.id
        user_state = self.user_states.get(user_id, {})
        seat_type = user_state['data'].get('seat_type', '–∫—É–ø–µ')
        
        await self._create_subscription(query, seat_type, berth_position)
    
    async def _create_subscription(self, query, seat_type, berth_position):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        user_id = query.from_user.id
        user_state = self.user_states.get(user_id, {})
        user_data = user_state.get('data', {})
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        departure_station = user_data.get('departure_station')
        arrival_station = user_data.get('arrival_station')
        departure_date = user_data.get('departure_date')
        train_info = user_data.get('selected_train', {})
        
        if not all([departure_station, arrival_station, departure_date, train_info]):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        subscription_id = await self.db.create_subscription(
            user_id=user_id,
            departure_station=departure_station,
            arrival_station=arrival_station,
            departure_date=departure_date,
            train_number=train_info['number'],
            seat_type=seat_type,
            berth_position=berth_position
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        await self.monitoring.start_monitoring(subscription_id)
        
        await query.edit_message_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üöÇ –ü–æ–µ–∑–¥: {train_info['number']}\n"
            f"üìç –ú–∞—Ä—à—Ä—É—Ç: {departure_station} ‚Üí {arrival_station}\n"
            f"üìÖ –î–∞—Ç–∞: {departure_date}\n"
            f"üõèÔ∏è –ú–µ—Å—Ç–æ: {seat_type} ({berth_position})\n\n"
            "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –∫–æ–≥–¥–∞ –Ω–∞–π–¥—É —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞!\n\n"
            "üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {'state': 'idle', 'data': {}}
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        user_state = self.user_states.get(user_id, {})
        current_state = user_state.get('state', 'idle')
        
        if current_state == 'waiting_departure':
            await self._handle_departure_station(update, text)
        elif current_state == 'waiting_arrival':
            await self._handle_arrival_station(update, text)
        elif current_state == 'waiting_date':
            await self._handle_date_selection(update, text)
        else:
            await update.message.reply_text(
                "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
    
    async def _handle_departure_station(self, update: Update, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.user_states[user_id]['data']['departure_station'] = text
        self.user_states[user_id]['state'] = 'waiting_arrival'
        
        await update.message.reply_text(
            f"üìç –°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –ø—Ä–∏–±—ã—Ç–∏—è:"
        )
    
    async def _handle_arrival_station(self, update: Update, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–∏–±—ã—Ç–∏—è"""
        user_id = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–Ω—Ü–∏—é –ø—Ä–∏–±—ã—Ç–∏—è
        self.user_states[user_id]['data']['arrival_station'] = text
        self.user_states[user_id]['state'] = 'waiting_date'
        
        await update.message.reply_text(
            f"üìç –ú–∞—Ä—à—Ä—É—Ç: {self.user_states[user_id]['data']['departure_station']} ‚Üí {text}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.12.2024):"
        )
    
    async def _handle_date_selection(self, update: Update, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        user_id = update.effective_user.id
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            departure_date = datetime.strptime(text, "%d.%m.%Y").strftime("%Y-%m-%d")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            if datetime.strptime(departure_date, "%Y-%m-%d") < datetime.now().date():
                await update.message.reply_text("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
            self.user_states[user_id]['data']['departure_date'] = departure_date
            
            # –ò—â–µ–º –ø–æ–µ–∑–¥–∞
            await self._search_trains(update, user_id)
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            )
    
    async def _search_trains(self, update: Update, user_id: int):
        """–ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–æ–≤ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É –∏ –¥–∞—Ç–µ"""
        user_data = self.user_states[user_id]['data']
        
        await update.message.reply_text("üîç –ò—â—É –ø–æ–µ–∑–¥–∞...")
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ –†–ñ–î
            trains = await self.parser.search_trains(
                departure_station=user_data['departure_station'],
                arrival_station=user_data['arrival_station'],
                departure_date=user_data['departure_date']
            )
            
            if not trains:
                await update.message.reply_text(
                    "‚ùå –ü–æ–µ–∑–¥–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –º–∞—Ä—à—Ä—É—Ç."
                )
                self.user_states[user_id] = {'state': 'idle', 'data': {}}
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∞
            text = f"üöÇ –ù–∞–π–¥–µ–Ω–æ –ø–æ–µ–∑–¥–æ–≤: {len(trains)}\n\n"
            keyboard = []
            
            for train in trains[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –ø–æ–µ–∑–¥–æ–≤
                text += (
                    f"üöÇ {train['number']}\n"
                    f"‚è∞ {train['departure_time']} ‚Üí {train['arrival_time']}\n"
                    f"‚è±Ô∏è –í –ø—É—Ç–∏: {train['duration']}\n\n"
                )
                
                callback_data = f"select_train_{train['number']}|{train['departure_time']}|{train['arrival_time']}|{train['duration']}"
                keyboard.append([InlineKeyboardButton(
                    f"–í—ã–±—Ä–∞—Ç—å {train['number']}", 
                    callback_data=callback_data
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="back_to_start")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–µ–∑–¥–æ–≤: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–µ–∑–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            self.user_states[user_id] = {'state': 'idle', 'data': {}}
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –†–ñ–î...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.initialize()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
            monitoring_task = asyncio.create_task(self.monitoring.run())
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.run_polling()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if 'monitoring_task' in locals():
                await self.monitoring.stop()
                monitoring_task.cancel()
                try:
                    await monitoring_task
                except asyncio.CancelledError:
                    pass

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = RZDBot(bot_token)
    await bot.run()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

