#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List
from telegram import Bot
from telegram.error import TelegramError

from database import Database
from rzd_parser import RZDParser

logger = logging.getLogger(__name__)

class MonitoringService:
    """–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç"""
    
    def __init__(self, db: Database, parser: RZDParser, bot_token: str = None):
        self.db = db
        self.parser = parser
        self.bot_token = bot_token
        self.bot = Bot(token=bot_token) if bot_token else None
        self.is_running = False
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.max_retries = 3
        self.retry_delay = 60  # 1 –º–∏–Ω—É—Ç–∞
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = True
        logger.info("–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω")
        
        # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        while not self.db._initialized:
            await asyncio.sleep(1)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await asyncio.sleep(5)
        
        while self.is_running:
            try:
                await self._check_all_subscriptions()
                await asyncio.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(self.retry_delay)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        logger.info("–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start_monitoring(self, subscription_id: int):
        """
        –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            subscription_id: ID –ø–æ–¥–ø–∏—Å–∫–∏
        """
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å—Ä–∞–∑—É
        await self._check_subscription(subscription_id)
    
    async def _check_all_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            subscriptions = await self.db.get_active_subscriptions()
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {len(subscriptions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            tasks = []
            for subscription in subscriptions:
                task = asyncio.create_task(
                    self._check_subscription(subscription['id'])
                )
                tasks.append(task)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    async def _check_subscription(self, subscription_id: int):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            subscription_id: ID –ø–æ–¥–ø–∏—Å–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            subscriptions = await self.db.get_active_subscriptions()
            subscription = next(
                (s for s in subscriptions if s['id'] == subscription_id), 
                None
            )
            
            if not subscription:
                logger.warning(f"–ü–æ–¥–ø–∏—Å–∫–∞ {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç
            availability_info = await self.parser.check_seat_availability(
                train_number=subscription['train_number'],
                departure_station=subscription['departure_station'],
                arrival_station=subscription['arrival_station'],
                departure_date=subscription['departure_date'],
                seat_type=subscription['seat_type'],
                berth_position=subscription['berth_position']
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await self.db.update_last_checked(subscription_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫
            seats_info = str(availability_info) if availability_info else None
            await self.db.add_check_history(
                subscription_id, 
                availability_info.get('available', False),
                seats_info
            )
            
            # –ï—Å–ª–∏ –º–µ—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if availability_info.get('available', False):
                await self._send_notification(subscription, availability_info)
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_id}: {e}")
    
    async def _send_notification(self, subscription: Dict, availability_info: Dict):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        
        Args:
            subscription: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
            availability_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç
        """
        try:
            if not self.bot:
                logger.warning("–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_notification_message(subscription, availability_info)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=subscription['telegram_id'],
                text=message,
                parse_mode='HTML'
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.add_notification(subscription['id'], message)
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription['telegram_id']}")
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def _format_notification_message(self, subscription: Dict, availability_info: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            subscription: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
            availability_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = (
            f"üéâ <b>–ù–∞–π–¥–µ–Ω—ã —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞!</b>\n\n"
            f"üöÇ <b>–ü–æ–µ–∑–¥:</b> {subscription['train_number']}\n"
            f"üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {subscription['departure_station']} ‚Üí {subscription['arrival_station']}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {subscription['departure_date']}\n"
            f"üõèÔ∏è <b>–¢–∏–ø –º–µ—Å—Ç–∞:</b> {subscription['seat_type']}\n"
        )
        
        if subscription['berth_position'] != '–ª—é–±–∞—è':
            message += f"üõèÔ∏è <b>–ü–æ–ª–∫–∞:</b> {subscription['berth_position']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        if availability_info.get('price'):
            message += f"üí∞ <b>–¶–µ–Ω–∞:</b> {availability_info['price']}\n"
        
        if availability_info.get('car_number'):
            message += f"üöÉ <b>–í–∞–≥–æ–Ω:</b> {availability_info['car_number']}\n"
        
        if availability_info.get('seat_number'):
            message += f"ü™ë <b>–ú–µ—Å—Ç–æ:</b> {availability_info['seat_number']}\n"
        
        message += (
            f"\n‚è∞ <b>–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
            f"https://pass.rzd.ru/tickets/public/ru"
        )
        
        return message
    
    async def get_monitoring_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            stats = await self.db.get_statistics()
            stats['is_running'] = self.is_running
            stats['check_interval'] = self.check_interval
            return stats
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return {}
    
    async def update_check_interval(self, interval: int):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Args:
            interval: –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if interval < 60:  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
            interval = 60
        
        self.check_interval = interval
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {interval} —Å–µ–∫—É–Ω–¥")
    
    async def cleanup_old_subscriptions(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
            subscriptions = await self.db.get_active_subscriptions()
            deactivated_count = 0
            
            for subscription in subscriptions:
                departure_date = datetime.strptime(subscription['departure_date'], '%Y-%m-%d').date()
                if departure_date < datetime.now().date():
                    await self.db.deactivate_subscription(subscription['id'])
                    deactivated_count += 1
            
            if deactivated_count > 0:
                logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {deactivated_count} –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    async def test_notification(self, telegram_id: int):
        """
        –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        """
        try:
            if not self.bot:
                logger.warning("–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return False
            
            test_message = (
                "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
                "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            )
            
            await self.bot.send_message(
                chat_id=telegram_id,
                text=test_message,
                parse_mode='HTML'
            )
            
            logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

